@model ItunesSearchMVC.Models.ItunesSearchModel
@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h4>Itunes Search</h4>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div>
        <form class="form-horizontal">
            <div class="row">
                <div class="col-xs-5">
                    <div class="form-group">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <label class="control-label col-xs-2">Search</label>
                        <div class="col-xs-3" style="width:70%">
                            @Html.EditorFor(model => model.searchString, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.searchString, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-6">
                    <div class="form-group">
                        <label class="control-label col-xs-1">Type</label>
                        <div class="col-xs-3" style="width:40%">
                            @Html.DropDownListFor(m => m.searchType, new List<SelectListItem>()
                                                              {
                                                                new SelectListItem() { Text = "Movie", Value = "movie" },
                                                                new SelectListItem() { Text = "Pod Casts", Value = "podcast" },
                                                                new SelectListItem() { Text = "Music", Value = "music" },
                                                                new SelectListItem() { Text = "Music Video", Value = "musicVideo"},
                                                                new SelectListItem() { Text = "Audio Book", Value = "audiobook" },
                                                                new SelectListItem() { Text = "Short Flim", Value = "shortFlim" },
                                                                new SelectListItem() { Text = "TV Show", Value = "tvShow" },
                                                                new SelectListItem() { Text = "Software", Value = "software" },
                                                                new SelectListItem() { Text = "E book", Value = "ebook" },
                                                                new SelectListItem() { Text = "All", Value = "" },
                                                              }, "--Select a Type--", new { @class = "dropdownlist" })
                            @Html.ValidationMessageFor(m => m.searchType, "", new { @class = "text-danger" })
                        </div>
                        <input type="submit" value="Search" class="col-xs-2" />
                    </div>
                </div>
            </div>
        </form>
    </div>
}
@if (Model.showResultsSection)
{
    if (Model.saerchResultsFound)
    {
        <h3>Search Results</h3>
        <div class="form-horizontal">
            <form class="form-horizontal">
                @foreach (var test in Model.results)
                {
                    <table class="form-horizontal">
                        <tr>
                            <td>
                                <img alt="" src=@test.artworkUrl100 style="display: inline; margin-right: 5px;" />
                            </td>
                            <td>
                                <text style="color:cornflowerblue">@test.trackName</text>
                                <br>
                                Released: @test.releaseDate.ToShortDateString()
                            </td>
                        </tr>
                    </table>

                }
            </form>
        </div>
    }
    else
    {
        <div class="form-horizontal">
            <form >
                <h3>Result Not Found </h3>
            </form>
        </div>
    }
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
